package com.dafeng.upgrade.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dafeng.upgrade.dao.TbImgs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TB_IMGS.
*/
public class TbImgsDao extends AbstractDao<TbImgs, Long> {

    public static final String TABLENAME = "TB_IMGS";

    /**
     * Properties of entity TbImgs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CurVer = new Property(2, String.class, "curVer", false, "CUR_VER");
        public final static Property LatestVer = new Property(3, String.class, "latestVer", false, "LATEST_VER");
        public final static Property DownloadUrl = new Property(4, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property DownloadId = new Property(5, Long.class, "downloadId", false, "DOWNLOAD_ID");
    };


    public TbImgsDao(DaoConfig config) {
        super(config);
    }
    
    public TbImgsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TB_IMGS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL UNIQUE ," + // 1: name
                "'CUR_VER' TEXT," + // 2: curVer
                "'LATEST_VER' TEXT," + // 3: latestVer
                "'DOWNLOAD_URL' TEXT," + // 4: downloadUrl
                "'DOWNLOAD_ID' INTEGER);"); // 5: downloadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TB_IMGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TbImgs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String curVer = entity.getCurVer();
        if (curVer != null) {
            stmt.bindString(3, curVer);
        }
 
        String latestVer = entity.getLatestVer();
        if (latestVer != null) {
            stmt.bindString(4, latestVer);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        Long downloadId = entity.getDownloadId();
        if (downloadId != null) {
            stmt.bindLong(6, downloadId);
        }
    }

    public TbImgs findById(long id){
    	java.util.List<TbImgs> list = queryRaw(
				" where " + Properties.Id.columnName
						+ "=" + id);
    	if (list.size()>0){
    		return list.get(0);
    	}
    	return null;
    }
    
    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TbImgs readEntity(Cursor cursor, int offset) {
        TbImgs entity = new TbImgs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curVer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latestVer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // downloadId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TbImgs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCurVer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatestVer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TbImgs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TbImgs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
